type Course implements Node {
  createdAt: ISO8601DateTime!
  databaseId: Int!
  id: ID!
  name: String
  updatedAt: ISO8601DateTime!
}

"""Autogenerated input type of CreateMenuItem"""
input CreateMenuItemInput {
  day: String
  position: Int
  recipeId: Int

  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
}

"""Autogenerated return type of CreateMenuItem"""
type CreateMenuItemPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  errors: [ValidationError!]!
  menuItem: MenuItem
}

"""Autogenerated input type of CreateRecipe"""
input CreateRecipeInput {
  name: String
  characteristic: String
  comment: String
  ingredients: String
  preparation: String
  vegetarian: Boolean
  cookingTime: Int
  courseId: ID
  seasonId: ID
  recipePhotos: [RecipePhotosAttributes!]

  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
}

"""Autogenerated return type of CreateRecipe"""
type CreateRecipePayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  errors: [ValidationError!]!
  recipe: Recipe
}

"""Autogenerated input type of DestroyMenuItem"""
input DestroyMenuItemInput {
  id: ID!

  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
}

"""Autogenerated return type of DestroyMenuItem"""
type DestroyMenuItemPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  menuItem: MenuItem
}

"""Autogenerated input type of DestroyRecipe"""
input DestroyRecipeInput {
  id: ID!

  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
}

"""Autogenerated return type of DestroyRecipe"""
type DestroyRecipePayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  recipe: Recipe
}

"""An ISO 8601-encoded date"""
scalar ISO8601Date

"""An ISO 8601-encoded datetime"""
scalar ISO8601DateTime

type MenuItem implements Node {
  createdAt: ISO8601DateTime!
  databaseId: Int!
  day: ISO8601Date
  id: ID!
  position: Int
  recipeId: Int!
  updatedAt: ISO8601DateTime!
}

type Mutation {
  createMenuItem(input: CreateMenuItemInput!): CreateMenuItemPayload
  createRecipe(input: CreateRecipeInput!): CreateRecipePayload
  destroyMenuItem(input: DestroyMenuItemInput!): DestroyMenuItemPayload
  destroyRecipe(input: DestroyRecipeInput!): DestroyRecipePayload
  updateMenuItem(input: UpdateMenuItemInput!): UpdateMenuItemPayload
  updateRecipe(input: UpdateRecipeInput!): UpdateRecipePayload
}

"""An object with an ID."""
interface Node {
  """ID of the object."""
  id: ID!
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, the cursor to continue."""
  endCursor: String

  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String
}

type Query {
  """Find all courses"""
  courses: [Course!]!

  """Find all menu_items"""
  menuItems: [MenuItem!]!

  """Fetches an object given its ID."""
  node(
    """ID of the object."""
    id: ID!
  ): Node

  """Fetches a list of objects given a list of IDs."""
  nodes(
    """IDs of the objects."""
    ids: [ID!]!
  ): [Node]!

  """Find the recipe by id"""
  recipe(id: ID!): Recipe!

  """Find all recipes with pagination"""
  recipePagination(query: String, vegetarian: Boolean, sortBy: String, sortDirection: String, page: Int, limit: Int, courseId: ID, seasonId: ID): RecipePagination!

  """Find all recipes"""
  recipes(
    query: String
    vegetarian: Boolean
    sortBy: String
    sortDirection: String
    courseId: ID
    seasonId: ID

    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
  ): RecipeConnection!

  """Find all seasons"""
  seasons: [Season!]!
}

type Recipe implements Node {
  bookNumber: Int
  characteristic: String
  comment: String
  cookingTime: Int
  course: Course
  courseId: ID
  createdAt: ISO8601DateTime!
  databaseId: Int!
  id: ID!
  ingredients: String
  name: String!
  pageNumber: Int
  preparation: String
  recipePhotos: [RecipePhoto!]!
  season: Season
  seasonId: ID
  updatedAt: ISO8601DateTime!
  vegetarian: Boolean
}

"""The connection type for Recipe."""
type RecipeConnection {
  """A list of edges."""
  edges: [RecipeEdge]

  """A list of nodes."""
  nodes: [Recipe]

  """Information to aid in pagination."""
  pageInfo: PageInfo!
}

"""An edge in a connection."""
type RecipeEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of the edge."""
  node: Recipe
}

type RecipePagination {
  recipes: [Recipe!]!
  totalCount: Int!
}

type RecipePhoto implements Node {
  createdAt: ISO8601DateTime!
  databaseId: Int!
  id: ID!
  position: Int
  recipeId: Int!
  updatedAt: ISO8601DateTime!
  url: String!
  urlLarge1x: String!
  urlLarge2x: String!
  urlThumb1x: String!
  urlThumb2x: String!
}

input RecipePhotosAttributes {
  id: ID
  _destroy: Boolean
  position: Int
  signedId: String
}

type Season implements Node {
  createdAt: ISO8601DateTime!
  databaseId: Int!
  id: ID!
  name: String
  updatedAt: ISO8601DateTime!
}

"""Autogenerated input type of UpdateMenuItem"""
input UpdateMenuItemInput {
  id: ID!
  day: String
  position: Int
  recipeId: Int

  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
}

"""Autogenerated return type of UpdateMenuItem"""
type UpdateMenuItemPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  errors: [ValidationError!]!
  menuItem: MenuItem
}

"""Autogenerated input type of UpdateRecipe"""
input UpdateRecipeInput {
  databaseId: Int!
  name: String
  characteristic: String
  comment: String
  ingredients: String
  preparation: String
  vegetarian: Boolean
  cookingTime: Int
  courseId: ID
  seasonId: ID
  recipePhotos: [RecipePhotosAttributes!]

  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
}

"""Autogenerated return type of UpdateRecipe"""
type UpdateRecipePayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  errors: [ValidationError!]!
  recipe: Recipe
}

type ValidationError {
  field: String!
  messages: [String!]
}

